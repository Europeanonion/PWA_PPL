async function fetchWorkoutData(phase,week){try{const paths=[`dev/exercise-data/phase${phase}-week${week}.json`,`./dev/exercise-data/phase${phase}-week${week}.json`,`/dev/exercise-data/phase${phase}-week${week}.json`,`../dev/exercise-data/phase${phase}-week${week}.json`,`/ppl-workout/dev/exercise-data/phase${phase}-week${week}.json`,`ppl-workout/dev/exercise-data/phase${phase}-week${week}.json`,`/workspaces/exceljson/dev/exercise-data/phase${phase}-week${week}.json`];console.log(`Loading workout data for phase ${phase}, week ${week}`);for(const path of paths){try{console.log(`Trying path: ${path}`);const response=await fetch(path);if(response.ok){console.log(`Successfully loaded data from: ${path}`);const data=await response.json();console.log(`Data loaded:`,data);return data}}catch(e){console.warn(`Path ${path} failed: ${e.message}`)}}throw new Error(`Failed to fetch workout data for Phase ${phase}, Week ${week} with all path strategies`)}catch(error){console.error("Error fetching workout data:",error);const contentContainer=document.querySelector(`#phase${phase}-week${week}`);if(contentContainer){contentContainer.innerHTML=`\n        <div class="error-message">\n          <p>Failed to load workout data for Phase ${phase}, Week ${week}.</p>\n          <p>Please check your internet connection and try again.</p>\n          <p>Error details: ${error.message}</p>\n        </div>\n      `}return null}}function createWorkoutDaySection(dayId,dayData){const section=document.createElement("section");section.className="workout-day";section.id=dayId;const header=document.createElement("h3");header.className="day-header";header.textContent=dayData.title;section.appendChild(header);const table=document.createElement("table");table.className="exercise-table";const thead=document.createElement("thead");const headerRow=document.createElement("tr");const headers=["Exercise","Sets","Working Sets","Reps","RPE","Rest"];headers.forEach((text=>{const th=document.createElement("th");th.textContent=text;headerRow.appendChild(th)}));thead.appendChild(headerRow);table.appendChild(thead);const tbody=document.createElement("tbody");if(dayData.exercises&&dayData.exercises.length>0){dayData.exercises.forEach((exercise=>{const exerciseRow=document.createElement("tr");exerciseRow.className="exercise-row";exerciseRow.id=`${exercise.id}-row`;const nameCell=document.createElement("td");nameCell.className="exercise-name";const nameSpan=document.createElement("span");nameSpan.textContent=exercise.name;nameCell.appendChild(nameSpan);const infoIcon=document.createElement("span");infoIcon.className="info-icon";infoIcon.innerHTML="â“˜";infoIcon.setAttribute("onclick",`toggleNotes('${exercise.id}-notes')`);nameCell.appendChild(infoIcon);const setsCell=document.createElement("td");setsCell.className="exercise-data";setsCell.textContent=exercise.warmup_sets;const workingSetsCell=document.createElement("td");workingSetsCell.className="exercise-data";workingSetsCell.textContent=exercise.working_sets;const repsCell=document.createElement("td");repsCell.className="exercise-data";repsCell.textContent=exercise.reps;const rpeCell=document.createElement("td");rpeCell.className="exercise-data";rpeCell.textContent=exercise.rpe;const restCell=document.createElement("td");restCell.className="exercise-data";restCell.textContent=exercise.rest;exerciseRow.appendChild(nameCell);exerciseRow.appendChild(setsCell);exerciseRow.appendChild(workingSetsCell);exerciseRow.appendChild(repsCell);exerciseRow.appendChild(rpeCell);exerciseRow.appendChild(restCell);tbody.appendChild(exerciseRow);const notesRow=document.createElement("tr");notesRow.className="notes-row";notesRow.id=`${exercise.id}-notes`;notesRow.style.display="none";const notesCell=document.createElement("td");notesCell.colSpan=6;const notesContent=document.createElement("div");notesContent.className="notes-content";const notesText=document.createElement("p");notesText.textContent=exercise.notes;notesContent.appendChild(notesText);if(exercise.link){const videoLink=document.createElement("a");videoLink.href=exercise.link;videoLink.textContent="Watch Video";videoLink.target="_blank";videoLink.rel="noopener";notesContent.appendChild(videoLink)}if(exercise.substitutions&&exercise.substitutions.length>0){const subsTitle=document.createElement("p");subsTitle.className="subs-title";subsTitle.textContent="Substitutions:";subsTitle.innerHTML+=` <span class="toggle-subs" onclick="toggleSubs('${exercise.id}-subs')">Show</span>`;notesContent.appendChild(subsTitle);const subsList=document.createElement("ul");subsList.className="subs-list";subsList.id=`${exercise.id}-subs`;subsList.style.display="none";exercise.substitutions.forEach((sub=>{const subItem=document.createElement("li");subItem.textContent=sub;subsList.appendChild(subItem)}));notesContent.appendChild(subsList)}notesCell.appendChild(notesContent);notesRow.appendChild(notesCell);tbody.appendChild(notesRow)}))}table.appendChild(tbody);section.appendChild(table);const progressSection=document.createElement("div");progressSection.className="progress-section";const progressBar=document.createElement("div");progressBar.className="progress-bar";const progressBarFill=document.createElement("div");progressBarFill.className="progress-bar-fill";progressBarFill.style.width="0%";progressBar.appendChild(progressBarFill);progressSection.appendChild(progressBar);const progressStats=document.createElement("div");progressStats.className="progress-stats";progressStats.innerHTML="<span>0/0 exercises completed</span><span>0%</span>";progressSection.appendChild(progressStats);section.appendChild(progressSection);return section}async function loadWorkoutData(phase,week){const contentContainer=document.querySelector(`#phase${phase}-week${week}`);if(!contentContainer){console.error(`Content container not found for Phase ${phase}, Week ${week}`);return}if(contentContainer.querySelector(".workout-day")){console.log(`Data already loaded for Phase ${phase}, Week ${week}`);return}contentContainer.innerHTML='<div class="loading-indicator">Loading workout data...</div>';const workoutData=await fetchWorkoutData(phase,week);if(!workoutData){console.error(`Failed to load workout data for Phase ${phase}, Week ${week}`);contentContainer.innerHTML='<p class="error-message">Failed to load workout data. Please try again later.</p>';return}contentContainer.innerHTML="";if(workoutData.days){Object.entries(workoutData.days).forEach((([dayId,dayData])=>{const daySection=createWorkoutDaySection(dayId,dayData);contentContainer.appendChild(daySection)}))}if(window.generateExerciseInputs){setTimeout((()=>{console.log("Generating exercise inputs...");window.generateExerciseInputs();console.log("Exercise inputs generation complete")}),300)}if(window.updateWorkoutProgress){setTimeout((()=>{console.log("Updating workout progress...");window.updateWorkoutProgress();console.log("Workout progress updated")}),500)}console.log(`Workout data loaded for Phase ${phase}, Week ${week}`)}function checkWorkoutLoader(){if(window.workoutLoader){return true}window.workoutLoader={loadData:loadWorkoutData,fetchData:fetchWorkoutData,createDaySection:createWorkoutDaySection};window.loadWorkoutData=loadWorkoutData;window.fetchWorkoutData=fetchWorkoutData;window.createWorkoutDaySection=createWorkoutDaySection;console.log("WorkoutLoader initialized");return true}document.addEventListener("DOMContentLoaded",(function(){console.log("DOM loaded, initializing workout loader...");checkWorkoutLoader();setTimeout((()=>{if(window.workoutLoader){console.log("Loading initial workout data for Phase 1, Week 1");window.workoutLoader.loadData(1,1)}}),1e3)}));