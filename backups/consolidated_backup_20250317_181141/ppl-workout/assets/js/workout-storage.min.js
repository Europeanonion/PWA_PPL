const DEFAULT_WORKOUT_DATA={settings:{units:"lbs",darkMode:!1,notifications:!1},currentPhase:1,currentWeek:1,progress:{},personalRecords:{}};function initializeWorkoutData(){return localStorage.getItem("pplWorkoutData")?JSON.parse(localStorage.getItem("pplWorkoutData")):(localStorage.setItem("pplWorkoutData",JSON.stringify(DEFAULT_WORKOUT_DATA)),console.log("Initialized new workout data storage"),DEFAULT_WORKOUT_DATA)}function loadWorkoutData(){const e=localStorage.getItem("pplWorkoutData");return e?JSON.parse(e):initializeWorkoutData()}function saveWorkoutData(e){localStorage.setItem("pplWorkoutData",JSON.stringify(e))}function loadWorkoutDay(e,t,o){const s=loadWorkoutData(),r=`phase${e}`,a=`week${t}`;return s.progress[r]&&s.progress[r][a]&&s.progress[r][a][o]?s.progress[r][a][o]:null}function saveWorkoutDay(e,t,o,s){const r=loadWorkoutData(),a=`phase${e}`,n=`week${t}`;return r.progress[a]||(r.progress[a]={}),r.progress[a][n]||(r.progress[a][n]={}),s.date||(s.date=(new Date).toISOString().split("T")[0]),r.progress[a][n][o]=s,saveWorkoutData(r),s.exercises&&checkForPersonalRecords(s.exercises),s}function saveExerciseSet(e,t,o,s,r,a,n,c){const i=loadWorkoutData(),l=`phase${e}`,u=`week${t}`;for(i.progress[l]||(i.progress[l]={}),i.progress[l][u]||(i.progress[l][u]={}),i.progress[l][u][o]||(i.progress[l][u][o]={date:(new Date).toISOString().split("T")[0],exercises:{}}),i.progress[l][u][o].exercises||(i.progress[l][u][o].exercises={}),i.progress[l][u][o].exercises[s]||(i.progress[l][u][o].exercises[s]={sets:[]});i.progress[l][u][o].exercises[s].sets.length<=r;)i.progress[l][u][o].exercises[s].sets.push({});i.progress[l][u][o].exercises[s].sets[r]={weight:null!==a?parseFloat(a):null,reps:null!==n?parseInt(n):null,completed:c},saveWorkoutData(i),null!==a&&null!==n&&checkPersonalRecord(s,parseFloat(a),parseInt(n))}function checkPersonalRecord(e,t,o){if(!t||!o)return!1;const s=loadWorkoutData();s.personalRecords||(s.personalRecords={});const r=s.personalRecords[e];let a=!1;const n=t*o;return(!r||t>r.weight||t===r.weight&&o>r.reps||n>r.weight*r.reps)&&(a=!0),!!a&&(s.personalRecords[e]={weight:t,reps:o,date:(new Date).toISOString().split("T")[0],volume:n},saveWorkoutData(s),!0)}function checkForPersonalRecords(e){for(const t in e){const o=e[t];o.sets&&o.sets.forEach((e=>{e.weight&&e.reps&&checkPersonalRecord(t,e.weight,e.reps)}))}}function exportWorkoutData(){const e=loadWorkoutData(),t=JSON.stringify(e,null,2),o="data:application/json;charset=utf-8,"+encodeURIComponent(t),s=document.createElement("a");s.setAttribute("href",o),s.setAttribute("download",`ppl-workout-data-${(new Date).toISOString().split("T")[0]}.json`),document.body.appendChild(s),s.click(),document.body.removeChild(s),showFeedback("Data exported successfully!","success")}function importWorkoutData(e){const t=new FileReader;t.onload=function(){try{const e=JSON.parse(t.result);if(!e.progress||!e.settings)return void showFeedback("Invalid workout data format","error");localStorage.setItem("pplWorkoutData",JSON.stringify(e)),showFeedback("Workout data imported successfully!","success"),setTimeout((()=>{location.reload()}),1500)}catch(e){showFeedback(`Error importing data: ${e.message}`,"error")}},t.readAsText(e)}function showFeedback(e,t="success"){let o=document.getElementById("feedback-message");o||(o=document.createElement("div"),o.id="feedback-message",o.className="feedback-message",document.querySelector(".container").prepend(o)),o.textContent=e,o.className=`feedback-message ${t}`,o.style.display="block",setTimeout((()=>{o.style.display="none"}),3e3)}function clearWorkoutData(){return!!confirm("This will delete all your workout data. Are you sure?")&&(localStorage.removeItem("pplWorkoutData"),showFeedback("All workout data has been cleared","warning"),setTimeout((()=>{location.reload()}),1500),!0)}function updateUIWithSavedData(e,t,o){const s=loadWorkoutDay(e,t,o);if(s&&s.exercises)for(const e in s.exercises){const t=s.exercises[e];if(t.sets&&t.sets.forEach(((t,o)=>{const s=document.querySelector(`.weight-input[data-exercise="${e}"][data-set="${o+1}"]`),r=document.querySelector(`.rep-input[data-exercise="${e}"][data-set="${o+1}"]`),a=document.querySelector(`.completed-checkbox[data-exercise="${e}"][data-set="${o+1}"]`);if(s&&null!==t.weight&&(s.value=t.weight),r&&null!==t.reps&&(r.value=t.reps),a&&(a.checked=t.completed),a&&a.checked){const e=a.closest(".set-row");e&&e.classList.add("completed")}if(t.weight&&t.reps){checkPersonalRecord(e,t.weight,t.reps)&&s&&s.classList.add("personal-record")}})),t.notes){const o=document.querySelector(`.exercise-notes[data-exercise="${e}"] textarea`);o&&(o.value=t.notes)}}}function getWeightUnit(){const e=loadWorkoutData();return e.settings?.units||"lb"}function setWeightUnit(e){if("kg"!==e&&"lb"!==e)throw new Error('Invalid weight unit. Must be "kg" or "lb"');const t=loadWorkoutData();return t.settings.units=e,saveWorkoutData(t),showFeedback(`Weight unit changed to ${e}`,"success"),t}window.workoutStorage={initialize:initializeWorkoutData,loadAll:loadWorkoutData,saveAll:saveWorkoutData,loadDay:loadWorkoutDay,saveDay:saveWorkoutDay,saveSet:saveExerciseSet,checkPR:checkPersonalRecord,exportData:exportWorkoutData,importData:importWorkoutData,clearData:clearWorkoutData,updateUI:updateUIWithSavedData,showFeedback:showFeedback,getWeightUnit:getWeightUnit,setWeightUnit:setWeightUnit};