const DEFAULT_WORKOUT_DATA={settings:{units:"lbs",darkMode:false,notifications:false},currentPhase:1,currentWeek:1,progress:{},personalRecords:{}};function initializeWorkoutData(){if(!localStorage.getItem("pplWorkoutData")){localStorage.setItem("pplWorkoutData",JSON.stringify(DEFAULT_WORKOUT_DATA));console.log("Initialized new workout data storage");return DEFAULT_WORKOUT_DATA}return JSON.parse(localStorage.getItem("pplWorkoutData"))}function loadWorkoutData(){const data=localStorage.getItem("pplWorkoutData");if(!data){return initializeWorkoutData()}return JSON.parse(data)}function saveWorkoutData(data){localStorage.setItem("pplWorkoutData",JSON.stringify(data))}function loadWorkoutDay(phase,week,day){const allData=loadWorkoutData();const phaseKey=`phase${phase}`;const weekKey=`week${week}`;if(!allData.progress[phaseKey]||!allData.progress[phaseKey][weekKey]||!allData.progress[phaseKey][weekKey][day]){return null}return allData.progress[phaseKey][weekKey][day]}function saveWorkoutDay(phase,week,day,dayData){const allData=loadWorkoutData();const phaseKey=`phase${phase}`;const weekKey=`week${week}`;if(!allData.progress[phaseKey]){allData.progress[phaseKey]={}}if(!allData.progress[phaseKey][weekKey]){allData.progress[phaseKey][weekKey]={}}if(!dayData.date){dayData.date=(new Date).toISOString().split("T")[0]}allData.progress[phaseKey][weekKey][day]=dayData;saveWorkoutData(allData);if(dayData.exercises){checkForPersonalRecords(dayData.exercises)}return dayData}function saveExerciseSet(phase,week,day,exerciseId,setIndex,weight,reps,completed){const allData=loadWorkoutData();const phaseKey=`phase${phase}`;const weekKey=`week${week}`;if(!allData.progress[phaseKey]){allData.progress[phaseKey]={}}if(!allData.progress[phaseKey][weekKey]){allData.progress[phaseKey][weekKey]={}}if(!allData.progress[phaseKey][weekKey][day]){allData.progress[phaseKey][weekKey][day]={date:(new Date).toISOString().split("T")[0],exercises:{}}}if(!allData.progress[phaseKey][weekKey][day].exercises){allData.progress[phaseKey][weekKey][day].exercises={}}if(!allData.progress[phaseKey][weekKey][day].exercises[exerciseId]){allData.progress[phaseKey][weekKey][day].exercises[exerciseId]={sets:[]}}while(allData.progress[phaseKey][weekKey][day].exercises[exerciseId].sets.length<=setIndex){allData.progress[phaseKey][weekKey][day].exercises[exerciseId].sets.push({})}allData.progress[phaseKey][weekKey][day].exercises[exerciseId].sets[setIndex]={weight:weight!==null?parseFloat(weight):null,reps:reps!==null?parseInt(reps):null,completed:completed};saveWorkoutData(allData);if(weight!==null&&reps!==null){checkPersonalRecord(exerciseId,parseFloat(weight),parseInt(reps))}}function checkPersonalRecord(exerciseId,weight,reps){if(!weight||!reps)return false;const allData=loadWorkoutData();if(!allData.personalRecords){allData.personalRecords={}}const currentPR=allData.personalRecords[exerciseId];let isPR=false;const volume=weight*reps;if(!currentPR||weight>currentPR.weight){isPR=true}else if(weight===currentPR.weight&&reps>currentPR.reps){isPR=true}else if(volume>currentPR.weight*currentPR.reps){isPR=true}if(isPR){allData.personalRecords[exerciseId]={weight:weight,reps:reps,date:(new Date).toISOString().split("T")[0],volume:volume};saveWorkoutData(allData);return true}return false}function checkForPersonalRecords(exercises){for(const exerciseId in exercises){const exercise=exercises[exerciseId];if(exercise.sets){exercise.sets.forEach((set=>{if(set.weight&&set.reps){checkPersonalRecord(exerciseId,set.weight,set.reps)}}))}}}function exportWorkoutData(){const allData=loadWorkoutData();const dataStr=JSON.stringify(allData,null,2);const dataUri="data:application/json;charset=utf-8,"+encodeURIComponent(dataStr);const exportLink=document.createElement("a");exportLink.setAttribute("href",dataUri);exportLink.setAttribute("download",`ppl-workout-data-${(new Date).toISOString().split("T")[0]}.json`);document.body.appendChild(exportLink);exportLink.click();document.body.removeChild(exportLink);showFeedback("Data exported successfully!","success")}function importWorkoutData(file){const reader=new FileReader;reader.onload=function(){try{const data=JSON.parse(reader.result);if(!data.progress||!data.settings){showFeedback("Invalid workout data format","error");return}localStorage.setItem("pplWorkoutData",JSON.stringify(data));showFeedback("Workout data imported successfully!","success");setTimeout((()=>{location.reload()}),1500)}catch(e){showFeedback(`Error importing data: ${e.message}`,"error")}};reader.readAsText(file)}function showFeedback(message,type="success"){let feedbackEl=document.getElementById("feedback-message");if(!feedbackEl){feedbackEl=document.createElement("div");feedbackEl.id="feedback-message";feedbackEl.className="feedback-message";document.querySelector(".container").prepend(feedbackEl)}feedbackEl.textContent=message;feedbackEl.className=`feedback-message ${type}`;feedbackEl.style.display="block";setTimeout((()=>{feedbackEl.style.display="none"}),3e3)}function clearWorkoutData(){if(confirm("This will delete all your workout data. Are you sure?")){localStorage.removeItem("pplWorkoutData");showFeedback("All workout data has been cleared","warning");setTimeout((()=>{location.reload()}),1500);return true}return false}function updateUIWithSavedData(phase,week,day){const dayData=loadWorkoutDay(phase,week,day);if(!dayData||!dayData.exercises)return;for(const exerciseId in dayData.exercises){const exerciseData=dayData.exercises[exerciseId];if(exerciseData.sets){exerciseData.sets.forEach(((set,index)=>{const weightInput=document.querySelector(`.weight-input[data-exercise="${exerciseId}"][data-set="${index+1}"]`);const repInput=document.querySelector(`.rep-input[data-exercise="${exerciseId}"][data-set="${index+1}"]`);const completedCheckbox=document.querySelector(`.completed-checkbox[data-exercise="${exerciseId}"][data-set="${index+1}"]`);if(weightInput&&set.weight!==null)weightInput.value=set.weight;if(repInput&&set.reps!==null)repInput.value=set.reps;if(completedCheckbox)completedCheckbox.checked=set.completed;if(completedCheckbox&&completedCheckbox.checked){const setRow=completedCheckbox.closest(".set-row");if(setRow)setRow.classList.add("completed")}if(set.weight&&set.reps){const isPR=checkPersonalRecord(exerciseId,set.weight,set.reps);if(isPR&&weightInput){weightInput.classList.add("personal-record")}}}))}if(exerciseData.notes){const notesInput=document.querySelector(`.exercise-notes[data-exercise="${exerciseId}"] textarea`);if(notesInput)notesInput.value=exerciseData.notes}}}function getWeightUnit(){const data=loadWorkoutData();return data.settings?.units||"lb"}function setWeightUnit(unit){if(unit!=="kg"&&unit!=="lb"){throw new Error('Invalid weight unit. Must be "kg" or "lb"')}const data=loadWorkoutData();data.settings.units=unit;saveWorkoutData(data);showFeedback(`Weight unit changed to ${unit}`,"success");return data}window.workoutStorage={initialize:initializeWorkoutData,loadAll:loadWorkoutData,saveAll:saveWorkoutData,loadDay:loadWorkoutDay,saveDay:saveWorkoutDay,saveSet:saveExerciseSet,checkPR:checkPersonalRecord,exportData:exportWorkoutData,importData:importWorkoutData,clearData:clearWorkoutData,updateUI:updateUIWithSavedData,showFeedback:showFeedback,getWeightUnit:getWeightUnit,setWeightUnit:setWeightUnit};