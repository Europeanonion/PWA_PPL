# Development Rules and Guidelines for PPL Workout App

## Project Overview
- Project Name: Ultimate Push-Pull-Legs Workout Tracker
- Main File: ppl-workout-html.html
- Goal: Create a comprehensive workout tracking system with progression through phases and weeks

## Code Style Guidelines

### HTML
- Use HTML5 semantic elements when appropriate
- Maintain consistent indentation (2 spaces)
- Add descriptive comments for major sections
- IDs should use kebab-case (e.g., `exercise-row`)
- Classes should be descriptive of their purpose
- All links should include `target="_blank"` and `rel="noopener"`

### CSS
- Keep styles in the `<style>` section of the HTML file
- Use classes instead of IDs for styling when possible
- Follow mobile-first approach for responsive design
- Use CSS variables for color themes and repeated values
- Maintain consistent naming conventions for classes

### JavaScript
- Use ES6+ syntax when possible
- Keep functions small and focused on a single task
- Use descriptive variable and function names
- Add comments for complex logic
- Validate user inputs where necessary
- Use consistent error handling

## Development Process

### 1. Core App Development (Current Focus)
- Complete one phase/week at a time before moving to the next
- Test each component before proceeding
- Keep mobile compatibility in mind throughout development

### 2. Local Storage Implementation
- Use a clear, hierarchical data structure
- Implement auto-save functionality where possible
- Provide feedback to users when data is saved/loaded
- Include data export/import functionality

### 3. Advanced Features (Optional)
- Only begin after core app is fully functional
- Document all Firebase configuration requirements
- Keep authentication simple and secure
- Implement proper error handling for network operations

## Approach Efficiency Evaluation (MANDATORY)

Before implementing any significant feature or architectural change, the AI agent MUST:

1. **Evaluate Alternative Approaches**
   - Consider at least 2-3 different implementation methods
   - Assess each approach against the project goals in the memory bank
   - Compare complexity, performance impact, and maintainability

2. **Justify Selected Approach**
   - Explicitly explain why the chosen approach is optimal
   - Reference specific project goals from the memory bank
   - Document trade-offs accepted and why they're acceptable

3. **Efficiency Checklist**
   - Will this approach minimize development time while maintaining quality?
   - Is this the simplest solution that meets all requirements?
   - Does this approach avoid unnecessary complexity or dependencies?
   - Is the solution scalable for future phases of the workout program?
   - Does this approach maintain or improve mobile performance?

4. **Document Evaluation in Memory Bank**
   - Record all approaches considered
   - Document efficiency rationale for selected approach
   - Note any technical debt incurred with planned resolution

This evaluation must be performed for:
- Any changes to data structure
- Introduction of new UI patterns
- Modifications to the core navigation system
- Changes to the localStorage implementation
- Addition of new tracking functionality

Trivial changes (styling adjustments, content additions, bug fixes) do not require formal evaluation but should still align with overall project goals.

## Memory Bank Requirements

### Format
The memory bank should be maintained as a Markdown file named `dev-memory-bank.md` and should include:

1. **Current Development Status**
   - Which phase/week is currently being worked on
   - List of completed components
   - List of pending components
   - Current blockers or issues

2. **Implementation Decisions**
   - Record of key decisions made during development
   - Reasons for specific technical approaches
   - Alternative approaches considered

3. **Data Structures**
   - Document the structure of all data objects
   - Include examples of expected data formats
   - Define relationships between different data elements

4. **Browser Compatibility Notes**
   - Record any browser-specific issues encountered
   - Document solutions implemented for cross-browser compatibility

5. **Testing Notes**
   - List of test cases executed
   - Issues found during testing
   - Verification steps for key functionality

6. **Approach Efficiency Analysis**
   - Document efficiency evaluations for major implementation decisions
   - Track how chosen approaches align with project goals
   - Record any technical debt with remediation plans

### Memory Bank Update Process
1. Update the memory bank at the end of each development session
2. Include timestamp with each major update
3. Review the memory bank at the start of each new session
4. Use the memory bank to track progress and maintain continuity

## Memory Bank Commands

### UMB Command
When the user types "UMB" (Update Memory Bank), the agent should:

1. Analyze the current state of the project files
2. Create a new entry in the memory bank with the current date
3. Document what has been completed since the last update
4. Update the "Current Focus" and "Completed Components" sections
5. Add any new implementation decisions or data structures
6. Suggest next steps based on current progress
7. Record any new issues or blockers encountered
8. **Evaluate if current approach remains most efficient to reach goals**

The agent should respond with a brief confirmation of the update and a summary of key points added to the memory bank.

Example response:
```
Memory bank updated with:
- Documented completion of Push Day 1 exercise data
- Added technical notes about localStorage implementation
- Updated next steps to focus on Pull Day 1
- Added browser compatibility note regarding Safari input fields
- Confirmed current approach remains most efficient for workout tracking goals
```

### Memory Bank Update Template
When updating the memory bank, the agent should use this template:

```
## YYYY-MM-DD Development Update

### Completed Since Last Update
- [List of completed tasks/components]

### Current Status
- Working on: [Current focus]
- Completed: [List of completed components]
- Pending: [List of pending components]
- Progress on milestones: [Update on milestone progress]

### Implementation Details
- [Any new technical decisions or implementation details]
- [Changes to data structures or architecture]
- [Solutions to previous issues or blockers]

### Approach Efficiency Assessment
- Goals referenced: [List specific goals from memory bank]
- Approaches considered: [Alternative approaches]
- Selected approach: [Description with efficiency justification]
- Alignment with goals: [How approach supports specific goals]

### Next Steps
- [List of next tasks to complete]

### Issues/Questions
- [Any new blockers or technical questions]
```

## Example Memory Bank Entry

```
## 2025-03-16 Development Session

### Completed Today
- Fixed table structure in Push Day 1
- Implemented toggleNotes() function
- Added exercise links for all week 1 bench press variations

### Current Status
- Working on: Phase 1, Week 1, Pull Day exercises
- Completed: Push Day 1, Push Day 2
- Pending: Pull Day 2, Legs Day 1, Legs Day 2

### Decisions Made
- Decided to use input fields of type "number" for weight tracking instead of text fields
- Using localStorage instead of sessionStorage to ensure data persists between browser sessions
- Implemented collapsible notes to save screen space

### Approach Efficiency Assessment
- Goals referenced: Mobile compatibility, offline functionality, user data persistence
- Approaches considered:
  1. Using custom number spinners with +/- buttons
  2. Using standard HTML number inputs with styling
  3. Using text inputs with validation
- Selected approach: Standard HTML number inputs with custom styling
- Efficiency justification: Provides native mobile number keyboards, built-in validation, 
  and requires less custom code while meeting all project goals

### Next Steps
- Complete remaining exercises for Pull Day 1
- Add substitution options for leg exercises
- Implement basic localStorage saving for completed sets

### Issues/Questions
- Need to research best approach for tracking progress over time
- Consider adding RPE explanation tooltip for new users
```

## Project Milestones Tracking

Track these milestones in the memory bank:

1. **Core Structure Complete** - Basic HTML/CSS framework with all navigation
2. **Phase 1 Content Complete** - All exercises, notes, and links for Phase 1
3. **All Phases Content Complete** - Full workout program implemented
4. **Local Storage MVP** - Basic tracking of weights and completed sets
5. **Enhanced Local Features** - Progress visualization and notes
6. **Cloud Integration** - If implementing Firebase (optional)

## Implementation Notes

### LocalStorage Data Structure
```javascript
// Example structure - document in memory bank
const workoutData = {
  "phase1": {
    "week1": {
      "push1": {
        "exercises": {
          "benchPress": {
            "weights": ["135", "155", "175"],
            "completed": [true, true, false],
            "notes": "Felt strong on first two sets"
          }
        },
        "completed": "2023-03-16"
      }
    }
  }
};
```

## Maintenance

### Deployment Process
- Always develop new features in the ppl-workout/ directory while on the development branch
- Keep the main branch as the stable production version
- When ready to deploy updates:
  1. Ensure all changes are committed to development branch
  2. Run the deployment script:
     ```bash
     ./ppl-workout/dev/deploy.sh
     ```
  3. Verify the deployment worked by testing the live site

### Version Control Workflow
- Make atomic commits with clear descriptive messages
- Always test changes locally before pushing to GitHub
- For major features:
  1. Create a feature branch from development
  2. Implement and test the feature
  3. Merge back to development when complete
- Only merge development → main when thoroughly tested

### Pre-Deployment Checklist
- Run HTML/CSS/JS validation
- Verify all assets are properly minified
- Test service worker registration and caching
- Validate PWA functionality works offline
- Check manifest.json for proper configuration
- Run Lighthouse audit to ensure optimal performance

### Dependency Management
- Document all third-party libraries with version numbers
- Periodically check for security updates
- Keep external dependencies minimal for better performance
- Use local copies of critical libraries for offline reliability